import { tankResponseType } from "../pages/base.entity";
import { userInfoType } from "../pages/login/login.logic"
import { globalData, staticData, tankSystemInfoType } from "./global.data";
import { httpRequestHeader } from "@/utils/https.logic.uts"
import { userInfoKeyName } from "@/store/storage.key.uts"



/**
 * tank 文件、文件夹实体或返回值
 */
export type fileDetailType = {
	/**
	 * id
	 */
	uuid : string;
	sort : number;
	updateTime : string;
	createTime : string;
	/**
	 * 父级目录id
	 */
	puuid : string;
	/**
	 * 用户id
	 */
	userUuid : string;
	/**
	 * 空间名称
	 */
	space_name : string;
	dir : boolean;
	name : string;
	md5 : string;
	size : number;
	/**
	 * 私有
	 */
	privacy : boolean;
	/**
	 * 路径
	 */
	path : string;
	times : number;
	prop : string;
	visitTime : string;
	/**
	 * 是否删除
	 */
	deleted : boolean;
	deleteTime : string;
	/**
	 * 空间id
	 */
	spaceUuid : string;
}


/**
 * 创建文件夹
 */
export function mkdirFileName(name : string, path : string = "root") : Promise<fileDetailType> {
	return new Promise((resolve, reject) => {
		// 主动在根目录创建一个备份文件夹
		uni.request<tankResponseType<fileDetailType>>({
			url: staticData.server + "/api/matter/create/directory",
			header: httpRequestHeader,
			data: {
				name: name,
				puuid: path,
				spaceUuid: globalData.user.spaceUuid
			},
			method: "POST",
			success(res) {
				// console.log("创建备份文件夹成功", crRes.data?.data)
				// staticData.backupFileName = mkName
				if (res.statusCode == 200) {
					resolve(res.data?.data!)
				} else {
					reject(false)
				}

			},
			fail(crErr) {
				// console.log("创建备份文件夹失败", crErr);
				reject(crErr)
			}
		})
	})
}



/**
 * 按需查询文件和文件夹列表的请求参数
 */
export type matterPageReqType = {
	/**
	 * 页
	 */
	page : number
	/**
	 * 页大小
	 */
	pageSize : number
	/**
	 * 可选 创建时间排序 "DESC"
	 */
	orderCreateTime ?: "DESC" | "ASC"
	/**
	 * uuid
	 */
	puuid : string
	/**
	 * 是否删除
	 */
	deleted : boolean
	/**
	 * 排序
	 */
	orderDir : "DESC" | "ASC"
	/**
	 * 可选 文件、文件夹名称
	 */
	name ?: string
}




/**
 * tank 按需查询文件和文件夹列表返回值类型
 */
export type matterPageResType = {
	page : number;
	pageSize : number;
	totalItems : number;
	totalPages : number;
	data : fileDetailType[]
}

/**
 * 按需查询文件和文件夹的列表
 */
export const matterPageUrl = staticData.server + "/api/matter/page"
/**
 * 按需查询文件和文件夹的列表
 */
export function matterPage(param : matterPageReqType) : Promise<matterPageResType> {
	return new Promise((resolve, reject) => {
		// console.log("------------请求参数", param);
		uni.request<tankResponseType<matterPageResType>>({
			url: matterPageUrl,
			data: {
				page: param.page,
				pageSize: param.pageSize,
				orderCreateTime: param.orderCreateTime,
				puuid: param.puuid,
				name: param.name,
				deleted: param.deleted,
				orderDir: param.orderDir
			}
			,
			method: "GET",
			success(res) {
				// console.log(`--------------------------查询 ${param.puuid} ￥${param.name} 成功： `, res)
				// staticData.backupFileName = mkName
				if (res.statusCode == 200) {
					resolve(res.data?.data!)
				} else {
					reject(false)
				}

			},
			fail(crErr) {
				// console.log("创建备份文件夹失败", crErr);
				reject(crErr)
			}
		})
	})
}




/**
 * 已登录 获取用户信息
 */
export function updUserInfo() {
	uni.request<tankResponseType<userInfoType>>({
		url: staticData.server + "/api/user/info",
		success(res) {
			globalData.user = res.data?.data!
			uni.setStorage({
				key: userInfoKeyName,
				data: globalData.user
			})
			console.log("执行逻辑成功：更新用户信息", globalData.user)
		}, fail(err) {
			console.log("执行逻辑失败：更新用户信息", err)
		}
	})
}



/**
 * 获取tank系统信息
 */
export function getTankInfo() {
	uni.request<tankResponseType<tankSystemInfoType>>({
		url: staticData.server + "/api/preference/fetch",
		method: "POST",
		success(res) {
			globalData.tankSystemInfo = res.data?.data!
			console.log("执行逻辑成功：获取后端系统信息", globalData.tankSystemInfo)
		},
		fail(err) {
			console.log("执行逻辑成功：获取后端系统信息 失败", err)
		}
	})
}