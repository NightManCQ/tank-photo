import { xxPermissions } from "../../uni_modules/xx-XXPermissions/utssdk/app-android";
import { Album, albumUtil } from "@/uni_modules/photo-util";
import Uri from "android.net.Uri";
import { locatAlbumKeyName } from "@/store/storage.key.uts"
import { appConfig, bakAlbumType } from "@/store/global.data.uts"
// import { UTSAndroid } from "io.dcloud.uts";
// // import Runnable from "java.lang.Runnable";
// import Thread from "java.lang.Thread";



const permission = ["android.permission.READ_MEDIA_IMAGES", "android.permission.READ_MEDIA_VIDEO", "android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE"]



/**
 * tank app使用的相册实体类
 * 使用相册名称对相册id进行分类
 */
export type tankAlbumType = {
	/**
	 * id
	 */
	id : number;
	/**
	 * 名称
	 */
	name : string;
	/**
	 * 封面照片途径 Url
	 */
	coverPicture : string
	/**
	 *  媒体文件数量
	 */
	count : number;
	/**
	 * 该相册的备份状态
	 * 0：不备份
	 * 1：正在备份
	 * 2：所有文件备份完成
	 */
	backups : 0 | 1 | 2
	/**
	 * 如果开启备份，且已经上传至 tank 服务器。就会有该id
	 */
	uuid ?: string
	/**
	 * 所有关联的相册id
	 * 使用名称进行相册分类会造成一个相册拥有多个本地相册的id
	 */
	correlationId : Array<number>
}

/**
 * 相册首页所用的数据
 */
type albumArrayDataType = {

	/**
	 * 读取外部存储需要请求的权限
	 */
	authorizationStatus : boolean
	/**
	 * tank app使用的相册实体类
	 */
	tankData : Array<Array<tankAlbumType>>
	/**
	 * tank app使用的相册实体类 一个数组梭哈
	 * 存储的内容同 tankData，修改此数组可以间接修改 tankData
	 */
	tankDataOnce : Array<tankAlbumType>
	albumMap : HashMap<number, Array<Album>>
	/**
	 * 已上传了多少个文件
	 */
	upFileCount : number
}


/**
 * 相册首页所用的数据
 */
export const albumArrayData = reactive({
	authorizationStatus: true,
	tankData: [],
	tankDataOnce: [],
	albumMap: hashMapOf(),
	upFileCount: 0
} as albumArrayDataType)




/**
 * 获取相册列表
 */
export function getalbums() {
	uni.getStorage({
		key: locatAlbumKeyName,
		success(res) {
			// console.log("----------------------", res.data);
			albumArrayData.tankDataOnce = JSON.parse<Array<tankAlbumType>>(JSON.stringify(res.data))!
			// const arr = albumArrayData.tankDataOnce
			// const viewArr = albumArrayData.tankData
			// for (let i = 0; i < arr.length; i++) {
			// 	const { albumClumns } = appConfig.value
			// 	const val = arr[i]
			// 	const yNum = i / albumClumns
			// 	if (i % albumClumns == 0) {
			// 		viewArr.push([])
			// 		viewArr[yNum].push(val)
			// 	} else {
			// 		viewArr[yNum].push(val)
			// 	}
			// }

			// 在一个独立线程里面进行更新
			// UTSAndroid.getDispatcher("io").async(function (_) {
			// 	console.log("gen ------------ ");
			updAlbumArray()
			// }, null)

		},
		fail() {
			console.log("====获取失败");
			updAlbumArray()
		}
	})

	// updAlbumArray()



}


/**
 * 更新相册列表
 */
function updAlbumArray() {
	albumArrayData.authorizationStatus = xxPermissions.checkSystemPermissionGranted(permission)
	// console.log("------", type, albumArrayData, albumArray.length);
	if (albumArrayData.authorizationStatus) {
		const albumArray : Array<Album> = albumUtil.getAlbum()
		// console.log("-----------------原始相册列表", albumArray.length);
		// uni x 的多列布局实现性能较低，所以采用官方的组件以提高性能，但官方还有没出多列布局，所以采用这种迂回的办法（20231129）
		const arr : Array<Array<tankAlbumType>> = []
		const newOnceArr : tankAlbumType[] = []
		const clumnsCount = appConfig.value.albumClumns
		const onceArr = albumArrayData.tankDataOnce



		for (let i = 0; i < albumArray.length; i++) {
			const yNum = i / clumnsCount
			const item : Album = albumArray[i]
			const bakAlbum = onceArr.find((val) : boolean => val["name"] == item.name)

			// 获取关联的相册
			const idArr : number[] = []
			item.correlationId.forEach((idVal) => {
				idArr.push(idVal.key)
			})
			const addObj : tankAlbumType = {
				id: item.id,
				name: item.name,
				count: item.count,
				uuid: bakAlbum?.uuid,
				backups: bakAlbum == null ? 0 : bakAlbum.backups,
				coverPicture: item.coverPicture,
				correlationId: idArr
			}
			if (i % clumnsCount == 0) {
				arr.push([])
			}
			arr[yNum].push(addObj)
			newOnceArr.push(addObj)
		}
		albumArrayData.tankDataOnce = newOnceArr
		albumArrayData.tankData = arr
		uni.setStorage({
			key: locatAlbumKeyName,
			data: newOnceArr
		})
		// console.log("------------", newOnceArr.length, newOnceArr);
	}
	//  else {
	// 	// if (type == 1) {


	// 	// } else {

	// 	// }

	// }
}