
import { staticData } from "../store/global.data";
import { userInfoKeyName, backupFileKeyName } from "../store/storage.key";
import { mkdirFileName, matterPageReqType, matterPage } from "@/store/tank.movement.uts"






/**
 * 获取设备信息
 */
export function getDeviceldInfo() {
	uni.getSystemInfo({
		success(res) {
			console.log("执行逻辑成功：获取设备系统信息", res);
			staticData.deviceld.brand = res.brand
			staticData.deviceld.model = res.model


			// 如果已经登录了，就去查询当前设备是否有备份的记录
			let data = uni.getStorageSync(userInfoKeyName)!
			if (data != "") {
				const mkName = `${res.brand}_${res.model}`
				const reqPar : matterPageReqType = {
					page: 0,
					pageSize: 1,
					orderCreateTime: 'DESC',
					puuid: 'root',
					name: mkName,
					deleted: false,
					orderDir: 'DESC'
				}

				matterPage(reqPar).then((res) => {
					if (res.data.length > 0) {
						staticData.backupFile = res.data[0]
						console.log("执行逻辑成功：获取备份文件夹信息", staticData.backupFile)
						uni.setStorage({
							key: backupFileKeyName,
							data: staticData.backupFile
						})
					} else {
						// 主动在根目录创建一个备份文件夹
						mkdirFileName(mkName).then((crResData) => {
							const { backupFile } = staticData
							backupFile.deleted = crResData.deleted
							backupFile.path = crResData.path
							backupFile.name = crResData.name
							backupFile.privacy = crResData.privacy
							backupFile.puuid = crResData.puuid
							backupFile.size = crResData.size
							backupFile.uuid = crResData.uuid
							uni.setStorage({
								key: backupFileKeyName,
								data: staticData.backupFile
							})
							console.log("执行逻辑成功：创建备份文件夹", backupFile)
						})
					}
				})
			}
		}
	})
}