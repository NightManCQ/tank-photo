export type UseOptions = {
	/**
	 * 开发者服务器域名
	 */
	baseURL: string;
	/**
	 * 请求的query参数，即最后拼接在地址栏后面的参数，如：`/user/info?id=1`
	 * @defaultValue null
	 */
	query?: UTSJSONObject | null,
	/**
	 * 请求的参数 UTSJSONObject|string类型
	 * @type {RequestDataOptions}
	 * @defaultValue null
	 */
	data?: any | null,
	/**
	 * 设置请求的 header，header 中不能设置 Referer
	 * @defaultValue null
	 */
	header?: UTSJSONObject | null,
	/**
	 * 超时时间，单位 ms
	 * @defaultValue 60000
	 */
	timeout?: number | null;
	/**
	 * 如果设为 json，会对返回的数据进行一次 JSON.parse，非 json 不会进行 JSON.parse
	 * @defaultValue "json"
	 * @deprecated 不支持
	 * @autodoc false
	 */
	dataType?: string | null;
	/**
	 * 设置响应的数据类型。
	 * 
	 * @deprecated 不支持
	 * @autodoc false
	 */
	responseType?: string | null;
	/**
	 * 验证 ssl 证书
	 * 
	 * @deprecated 不支持
	 * @autodoc false
	 */
	sslVerify?: boolean | null,
	/**
	 * 跨域请求时是否携带凭证（cookies）
	 * 
	 * @uniPlatform {
	 *    "app": {
	 *        "android": {
	 *            "osVer": "4.4",
	 *  		  	 "uniVer": "√",
	 * 			 "unixVer": "x"
	 *        },
	 *        "ios": {
	 *            "osVer": "9.0",
	 *  		  	 "uniVer": "√",
	 * 			 "unixVer": "x"
	 *        }
	 *    }
	 * }
	 * 
	 */
	withCredentials?: boolean | null,
	/**
	 * DNS解析时优先使用ipv4
	 * @defaultValue false
	 */
	firstIpv4?: boolean | null,
	/**
	 * 过滤重复请求
	 * @defaultValue false
	 */
	filterRequest?: boolean | null,
	/**
	 * 开启 debug 模式
	 * @defaultValue false
	 */
	debug?: boolean | null,
	/**
	 * 响应自定义成功状态码
	 * @description 只有响应的自定义成功状态码匹配时才会返回响应结果
	 */
	xhrCode?: any | null,
	/**
	 * 响应自定义状态码字段名
	 * @description 成功响应的自定义状态码名称，比如 code, statusCode等
	 */
	xhrCodeName?: string | null,
	/**
	 * 响应自定义描述内容字段名
	 * @description 成功响应的自定义描述内容字段名，比如 msg, message 等
	 * + 在定义了 `xhrCode` 和 `xhrCodeName` 时，该参数有效，当自定义成功状态码不匹配时作为catch返回的描述语
	 */
	xhrMessageName?: string | null,
	/**
	 * 开启请求缓存
	 */
	openCache?: boolean | null,
	/**
	 * 最大缓存数量
	 * @description 开启请求缓存时有效
	 */
	maxCacheSize?: number | null
};

/**
 * 请求配置
 */
export type RequestConfig = {
	/**
	 * 开发者服务器域名
	 */
	baseURL?: string,
	/**
	 * 开发者服务器接口地址
	 */
	url?: string,
	/**
	 * 请求的query参数，即最后拼接在地址栏后面的参数，如：`/user/info?id=1`
	 * @defaultValue null
	 */
	query?: UTSJSONObject | null,
	/**
	 * 请求的参数 UTSJSONObject|string类型
	 * @type {RequestDataOptions}
	 * @defaultValue null
	 */
	data?: any | null,
	/**
	 * 设置请求的 header，header 中不能设置 Referer
	 * @defaultValue null
	 */
	header?: UTSJSONObject | null,
	/**
	 * 请求方法
	 * 如果设置的值不在取值范围内，会以GET方法进行请求。
	 * @type {RequestMethod}
	 * @defaultValue "GET"
	 */
	method?: RequestMethod | null;
	/**
	 * 超时时间，单位 ms
	 * @defaultValue 60000
	 */
	timeout?: number | null;
	/**
	 * 如果设为 json，会对返回的数据进行一次 JSON.parse，非 json 不会进行 JSON.parse
	 * @defaultValue "json"
	 * @deprecated 不支持
	 * @autodoc false
	 */
	dataType?: string | null;
	/**
	 * 设置响应的数据类型。
	 * 
	 * @deprecated 不支持
	 * @autodoc false
	 */
	responseType?: string | null;
	/**
	 * 验证 ssl 证书
	 * 
	 * @deprecated 不支持
	 * @autodoc false
	 */
	sslVerify?: boolean | null,
	/**
	 * 跨域请求时是否携带凭证（cookies）
	 * 
	 * @uniPlatform {
	 *    "app": {
	 *        "android": {
	 *            "osVer": "4.4",
	 *  		  	 "uniVer": "√",
	 * 			 "unixVer": "x"
	 *        },
	 *        "ios": {
	 *            "osVer": "9.0",
	 *  		  	 "uniVer": "√",
	 * 			 "unixVer": "x"
	 *        }
	 *    }
	 * }
	 * 
	 */
	withCredentials?: boolean | null,
	/**
	 * DNS解析时优先使用ipv4
	 * @defaultValue false
	 */
	firstIpv4?: boolean | null,
	/**
	 * 过滤重复请求
	 * @defaultValue false
	 */
	filterRequest?: boolean | null,
	/**
	 * 开启 debug 模式
	 * @defaultValue false
	 */
	debug?: boolean | null,
	/**
	 * 接口自定义成功状态码
	 * @description 只有响应的自定义成功状态码匹配时才会返回响应结果
	 */
	xhrCode?: any | null,
	/**
	 * 接口自定义状态码字段名
	 * @description 成功响应的自定义状态码名称，比如 code, statusCode等
	 */
	xhrCodeName?: string | null,
	/**
	 * 响应自定义描述内容字段名
	 * @description 成功响应的自定义描述内容字段名，比如 msg, message 等
	 * + 在定义了 `xhrCode` 和 `xhrCodeName` 时，该参数有效，当自定义成功状态码不匹配时作为catch返回的描述语
	 */
	xhrMessageName?: string | null,
	/**
	 * 开启请求缓存
	 */
	openCache?: boolean | null,
	/**
	 * 最大缓存数量
	 * @description 开启请求缓存时有效
	 * @defaultValue 10
	 */
	maxCacheSize?: number | null
};

export type RequestInterceptor = (options: RequestConfig) => RequestConfig;
export type RequestInterceptorSync = (options: RequestConfig) => Promise<RequestConfig>;
export type ResponseInterceptor = (response: any) => any;
export type ResponseInterceptorSync = (response: any) => Promise<any>;

export type Interceptors = {
	request: RequestInterceptor[],
	response: ResponseInterceptor[],
	requestSync?: RequestInterceptorSync | null,
	responseSync?: ResponseInterceptorSync | null
}

export type FilterOptions = {
	debug?: boolean;
};

export type PendingRequests = Map<string, Promise<any>>;

/**
 * useRetry 初始化配置
 */
export type UseRetryOptions = {
	/**
	 * 最大重试次数
	 */
	maxRetryCount?: number | null;
	/**
	 * 初始重试等待时间
	 */
	initialDelay?: number | null;
	/**
	 * 最大重试等待时间
	 */
	maxDelay?: number | null;
};

/**
 * 错误码
 * 根据uni错误码规范要求，建议错误码以90开头，以下是错误码示例：
 * - 9010001 错误信息1
 * - 9010002 错误信息2
 */
export type KuxErrorCode = 901404 | 900408 | 900500;

// export interface KuxRequestFail extends IUniError {
// 	errCode: number;
// }

/**
 * 错误抛出统一接口定义
 */
export interface KuxRequestFail {
	/**
	 * 统一错误码
	 */
	errCode: number;
	/**
	 * 统一错误信息
	 */
	errMsg: string;
	/**
	 * 统一错误主题（模块）名称
	 */
	errSubject: string;
	/**
	 * 错误信息中包含的数据
	 */
	data: any | null;
	/**
	 * 源错误信息，可以包含多个错误，详见SourceError
	 */
	cause: Error | null;
}

// export type Interceptor = {
// 	request?: (options: RequestOptions<any>) => RequestOptions<any>;
// 	response?: (response:  any) => any;
// };
/**
 * Request实例
 */
// export declare class Request {
// 	constructor (config: UseOptions);
	
// 	public getKey (url: string, options: RequestConfig): string;
	
// 	/**
// 	 * 清除指定key的请求缓存
// 	 * @description 请求指定key的请求缓存，如果key为空则清空当前请求实例所有的请求缓存
// 	 * @returns {Request}
// 	 */
// 	public clearCache (key: string): Request;
	
// 	/**
// 	 * 获取指定key的请求缓存结果
// 	 * @description 获取指定key的请求缓存结果
// 	 * + key默认为 `url`-`options`
// 	 * @returns {Request}
// 	 */
// 	public cache (key: string): Request;
	
// 	/**
// 	 * 复写全局配置
// 	 * @description 复写当前实例的全局配置，比如data，query，header参数
// 	 * @param {RequestConfig} config 配置项
// 	 * @returns {Request}
// 	 */
// 	public overrideConfig (config: RequestConfig): Request;
	
// 	/**
// 	 * request请求
// 	 * @param {string} url 请求地址
// 	 * @param {RequestConfig} options 请求配置，会覆盖全局配置
// 	 * @returns {Promise<any>}
// 	 */
// 	public request (url: string, options: RequestConfig): Promise<any>;
	
// 	/**
// 	 * get请求
// 	 * @param {string} url 请求地址
// 	 * @param {RequestConfig} options 请求配置，会覆盖全局配置
// 	 * @returns {Promise<any>}
// 	 */
// 	public get (url: string, options: RequestConfig): Promise<any>;
	
// 	/**
// 	 * post请求
// 	 * @param {string} url 请求地址
// 	 * @param {RequestConfig} options 请求配置，会覆盖全局配置
// 	 * @returns {Promise<any>}
// 	 */
// 	public post (url: string, options: RequestConfig): Promise<any>;
	
// 	/**
// 	 * put请求
// 	 * @param {string} url 请求地址
// 	 * @param {RequestConfig} options 请求配置，会覆盖全局配置
// 	 * @returns {Promise<any>}
// 	 */
// 	public put (url: string, options: RequestConfig): Promise<any>;
	
// 	/**
// 	 * delete请求
// 	 * @param {string} url 请求地址
// 	 * @param {RequestConfig} options 请求配置，会覆盖全局配置
// 	 * @returns {Promise<any>}
// 	 */
// 	public delete (url: string, options: RequestConfig): Promise<any>;
	
// 	/**
// 	 * 中断当前请求
// 	 */
// 	public abort (): void;
// }

/**
 * 创建请求实例
 * @param {UseOptions} options 实例参数
 * @returns {Request}
 */
// export declare function useRequest (options: UseOptions): Request;