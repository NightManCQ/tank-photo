Skip to content

首页
搜索或转到...
DCloud / Hello UTS
977
12
4
代码
Issue 0
合并请求 0
DevOps
Wiki 0
分析
项目成员
Pages
master
hello - uts
uni_modules
uts - nativepage
utssdk
app - android
index.uts
杜庆泉's avatar
vue 示例增加 三方应用打开本地文件的示例
由 杜庆泉 提交于 3星期前
bc99c080
index.uts  9.6 KB
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
import Activity from 'android.app.Activity';
import BroadcastReceiver from 'android.content.BroadcastReceiver';
import Notification from 'android.app.Notification';
import Bundle from 'android.os.Bundle';
import R from 'io.dcloud.uni_modules.uts_nativepage.R';
import Intent from 'android.content.Intent';
import IntentFilter from 'android.content.IntentFilter';
import NotificationCompat from 'androidx.core.app.NotificationCompat';
import NotificationManager from 'android.app.NotificationManager';
import NotificationChannel from 'android.app.NotificationChannel';
import Context from 'android.content.Context';
import Button from 'android.widget.Button';
import OnClickListener from 'android.view.View.OnClickListener';
import View from 'android.view.View';
import Build from 'android.os.Build';
import IBinder from 'android.os.IBinder';
import Toast from 'android.widget.Toast';
import Service from 'android.app.Service';
import System from 'java.lang.System';
import Exception from 'java.lang.Exception';
import ResolveInfo from 'android.content.pm.ResolveInfo';
import RecyclerView from 'androidx.recyclerview.widget.RecyclerView';
import TextView from 'android.widget.TextView';
import ViewGroup from 'android.view.ViewGroup';
import LayoutInflater from 'android.view.LayoutInflater';
import LinearLayoutManager from 'androidx.recyclerview.widget.LinearLayoutManager';
export { DoAppWidget } from "./DoAppWidget.uts"
import Application from 'android.app.Application';
import File from 'java.io.File';
import Uri from 'android.net.Uri';
export class AppHookProxy implements UTSAndroidHookProxy {
	override onCreate(application : Application) {
		//当前应用是否 取得用户同意隐私协议
		android.util.Log.d("AppHookProxy", "AppHookProxy--onCreate---")
		if (UTSAndroid.isPrivacyAgree()) {
			//onCreate 初始化三方SDK
			android.util.Log.d("AppHookProxy", "AppHookProxy--onCreate---isPrivacyAgree")
		}
	}
}
class ForeService extends Service {
	constructor() {
		super();
	}
	override onCreate() : void {
		super.onCreate();
		console.log("onCreate");
	}

	override onBind(_intent ?: Intent) : IBinder | null {
		return null;
	}

	override onStartCommand(intent : Intent, flags : Int, startId : Int) : Int {
		let mBuilder = new NotificationCompat.Builder(this, "uts-test");

		// 点击后让通知将消失
		mBuilder.setAutoCancel(true)
		mBuilder.setContentText("测试")
		mBuilder.setContentTitle("测试")
		//通知产生的时间，会在通知信息里显示
		mBuilder.setWhen(System.currentTimeMillis())
		//设置该通知优先级
		mBuilder.setPriority(NotificationManager.IMPORTANCE_DEFAULT)
		//ture，设置他为一个正在进行的通知。他们通常是用来表示一个后台任务,用户积极参与(如播放音乐)或以某种方式正在等待,因此占用设备(如一个文件下载,同步操作,主动网络连接)
		mBuilder.setOngoing(false)
		//向通知添加声音、闪灯和振动效果的最简单、最一致的方式是使用当前的用户默认设置，使用defaults属性，可以组合：
		mBuilder.setDefaults(Notification.DEFAULT_ALL)


		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {

			let manager =
				UTSAndroid.getAppContext()!.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
			let channelId = "channelId" + System.currentTimeMillis()
			let channel = new NotificationChannel(
				channelId,
				"appName",
				NotificationManager.IMPORTANCE_HIGH
			)
			manager.createNotificationChannel(channel)
			mBuilder.setChannelId(channelId)
		}

		mBuilder.setContentIntent(null)
		this.startForeground(102, mBuilder.build())
		return super.onStartCommand(intent, flags, startId);
	}
	override onDestroy() : void {
		super.onDestroy();
		this.stopForeground(true);// 停止前台服务--参数：表示是否移除之前的通知
	}
}
class ScreenReceiver extends BroadcastReceiver {

	constructor() {
		super();
	}

	override onReceive(_context : Context, intent : Intent) : void {
		if (Intent.ACTION_SCREEN_OFF == intent.action) {
			console.log("==屏幕休眠了")
		}
		if (Intent.ACTION_SCREEN_ON == intent.action) {
			console.log("==屏幕唤醒了")
		}
	}
}
class StartServiceListener extends OnClickListener {

	override onClick(v ?: View) : void {

		var intent = new Intent(UTSAndroid.getUniActivity(), ForeService().javaClass);
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
			UTSAndroid.getAppContext()!.startForegroundService(intent);
		}
		else {
			UTSAndroid.getAppContext()!.startService(intent);
		}
	}
}
class StartBroadcastListener extends OnClickListener {

	override onClick(v ?: View) : void {

		let myReceiver = new ScreenReceiver();
		let filter = new IntentFilter();
		filter.addAction(Intent.ACTION_SCREEN_OFF);
		filter.addAction(Intent.ACTION_SCREEN_ON);
		UTSAndroid.getUniActivity()!.registerReceiver(myReceiver, filter);

		// 提示屏幕状态监听已经注册
		Toast.makeText(UTSAndroid.getAppContext(), "屏幕状态监听已注册，注意观察控制台日志", Toast.LENGTH_LONG).show();

	}
}
class StartThreadListener extends OnClickListener {

	override onClick(v ?: View) : void {
		new CustomThread().start()
		// 提示屏幕状态监听已经注册
		Toast.makeText(UTSAndroid.getAppContext(), "自定义线程已开启，注意观察控制台输出", Toast.LENGTH_LONG).show();

	}
}
class ActivityFinishListener extends OnClickListener {

	host : Activity

	constructor(activity : Activity) {
		super()
		this.host = activity
	}

	override onClick(v ?: View) : void {
		Toast.makeText(UTSAndroid.getAppContext(), "手动关闭当前activity", Toast.LENGTH_LONG).show();
		this.host.finish()

	}
}
/**
 * 自定义异步线程
 */
class CustomThread extends Thread {

	constructor() {
		super();
	}

	override run() {
		Thread.sleep(1000)
		console.log("CustomThread = " + Thread.currentThread().getName())
	}
}
class FruitAdapter extends RecyclerView.Adapter<FruitAdapter.ViewHolder>{


	mFruitList : Array<String> = []

	constructor(param : Array<String>) {
		super()
		mFruitList = param
	}

	ViewHolder = class extends RecyclerView.ViewHolder {

		fruitName : TextView;
		constructor(view : View) {
			super(view);
			fruitName = view.findViewById(R.id.fruit_name) as TextView;
		}
	}
	override onCreateViewHolder(
		parent : ViewGroup,
		viewType : Int
	) : ViewHolder {
		let view : View =
			LayoutInflater.from(parent.context).inflate(R.layout.fruit_item, parent, false)
		return ViewHolder(view)
	}
	override onBindViewHolder(holder : ViewHolder, position : Int) {
		let fruit : String = mFruitList[position]
		holder.fruitName.setText(fruit)
	}
	override getItemCount() : Int {
		return mFruitList.size
	}

}
class DemoActivity extends Activity {

	constructor() {
		super();
	}

	override onCreate(savedInstanceState ?: Bundle) : void {
		super.onCreate(savedInstanceState)
		this.setContentView(R.layout.demo_activity);

		let btn_start_service_front = this.findViewById<Button>(R.id.btn_start_service_front);
		btn_start_service_front.setOnClickListener(new StartServiceListener());

		let btn_start_screen_listen = this.findViewById<Button>(R.id.btn_start_screen_listen);
		btn_start_screen_listen.setOnClickListener(new StartBroadcastListener());

		let btn_start_thread = this.findViewById<Button>(R.id.btn_start_thread);
		btn_start_thread.setOnClickListener(new StartThreadListener());

		let btn_finish_activity = this.findViewById<Button>(R.id.btn_finish_activity);
		btn_finish_activity.setOnClickListener(new ActivityFinishListener(this));



		let recyclerView = this.findViewById<RecyclerView>(R.id.recycler_view)
		let layoutManager = new LinearLayoutManager(this);
		recyclerView.setLayoutManager(layoutManager);
		let fruitAdapter = new FruitAdapter(utsArrayOf("香蕉", "苹果", "大鸭梨"));
		recyclerView.setAdapter(fruitAdapter);
	}

}
@Suppress("DEPRECATION")
class IntentRunable extends Runnable {
	override run() {
		console.log("IntentRunable = " + Thread.currentThread().getName())
		let intent = new Intent(UTSAndroid.getUniActivity(), DemoActivity().javaClass);
		UTSAndroid.getUniActivity()!.startActivity(intent);
	}
}
@Suppress("DEPRECATION")
export function gotoDemoActivity() : boolean {
	// 这里的逻辑是为了判断 当前的自定义activity 是否注册了，并以此为条件判断是否是自定义基座
	let hasXActivityIntegration = true
	try {
		let packageManager = UTSAndroid.getUniActivity()!.getPackageManager();
		let intent = new Intent(UTSAndroid.getUniActivity(), DemoActivity().javaClass);
		let resolveInfo = packageManager.queryIntentActivities(intent, 0);
		console.log(resolveInfo.size)
		if (resolveInfo.size == 0) {
			hasXActivityIntegration = false;
		}
	} catch (e : Exception) {
		console.log(e);
		hasXActivityIntegration = false;
	}

	if (!hasXActivityIntegration) {
		return false;
	}
	// 跳转到一个新的界面
	UTSAndroid.getUniActivity()!.runOnUiThread(new IntentRunable())
	return true;

}
export function openFileWithProvider(url : String) {
	let file = new File(UTSAndroid.getResourcePath("static/logo.png"))
	// 这里的 io.dcloud.hellouts.uts_nativepage.fileprovider 应该是你唯一的fileprovider 标识
	const uri = androidx.core.content.FileProvider.getUriForFile(UTSAndroid.getUniActivity()!, "io.dcloud.hellouts.uts_nativepage.fileprovider", file)
	console.log("uri", uri.toString())
	const intent = new Intent(Intent.ACTION_VIEW, uri)
	intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION) // 添加权限标志 
	const context = UTSAndroid.getUniActivity()!;
	context.startActivity(intent);
}